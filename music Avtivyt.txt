package com.framgia.music_20.screen.play_song;

import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.os.Parcelable;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.widget.ImageButton;
import android.widget.SeekBar;
import android.widget.TextView;
import android.widget.Toast;
import com.bumptech.glide.Glide;
import com.framgia.music_20.R;
import com.framgia.music_20.data.model.Song;
import com.framgia.music_20.utils.Constant;
import de.hdodenhof.circleimageview.CircleImageView;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

public class PlayMusicActivity extends AppCompatActivity
        implements View.OnClickListener, SeekBar.OnSeekBarChangeListener {
    public boolean mCheckService;
    boolean checkStart;
    private List<Song> mSongs;
    private ImageButton mButtonPlay;
    private SeekBar mSeekBar;
    private TextView mTextSong, mTextArtist, mTextCurrent, mTextDuration;
    private CircleImageView mImageAvata;
    private PlayMusicService mPlayMusicService;
    private int mPostion;
    private ServiceConnection mServiceConnection = new ServiceConnection() {
        @Override
        public void onServiceConnected(ComponentName name, IBinder service) {
            PlayMusicService.MusicBinder binder = (PlayMusicService.MusicBinder) service;
            mPlayMusicService = binder.getService();
            setView();
            mCheckService = true;
        }

        @Override
        public void onServiceDisconnected(ComponentName name) {
            mCheckService = false;
        }
    };

    public static Intent newInstance(Context context, List<Song> songList, int position) {
        Intent intent = new Intent(context, PlayMusicActivity.class);
        intent.putParcelableArrayListExtra(Constant.EXTRA_VALUE,
                (ArrayList<? extends Parcelable>) songList);
        intent.putExtra(Constant.POSITION, position);
        return intent;
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_play_music);
        initData();
        getData();
        initView();
    }

    private void initData() {
        mSongs = getIntent().getParcelableArrayListExtra(Constant.EXTRA_VALUE);
        mPostion = getIntent().getIntExtra(Constant.POSITION, 0);
        Toast.makeText(this, mPostion + "   nh?n ...  " + mSongs.get(mPostion).getTitle(),
                Toast.LENGTH_SHORT).show();
    }

    private void initView() {

        mImageAvata = findViewById(R.id.image_avatar);
        mTextSong = findViewById(R.id.text_song_name);
        mTextArtist = findViewById(R.id.text_artist_name);
        ImageButton buttonExit = findViewById(R.id.button_exit);
        ImageButton buttonDownLoad = findViewById(R.id.button_download);
        ImageButton buttonLoopAll = findViewById(R.id.button_loop_all);
        ImageButton buttonNext = findViewById(R.id.button_next);
        mButtonPlay = findViewById(R.id.button_play);
        ImageButton buttonPrevious = findViewById(R.id.button_previous);
        ImageButton buttonShuffle = findViewById(R.id.button_shuffle);
        mTextCurrent = findViewById(R.id.text_current_position);
        mTextDuration = findViewById(R.id.text_duration);
        mSeekBar = findViewById(R.id.seek_bar);

        buttonExit.setOnClickListener(this);
        buttonDownLoad.setOnClickListener(this);
        buttonLoopAll.setOnClickListener(this);
        buttonPrevious.setOnClickListener(this);
        mButtonPlay.setOnClickListener(this);
        buttonNext.setOnClickListener(this);
        buttonShuffle.setOnClickListener(this);
        mSeekBar.setOnSeekBarChangeListener(this);
    }

    public void setView() {
        mTextSong.setText(mPlayMusicService.getSongName());
        mTextArtist.setText(mPlayMusicService.getArtistName());
        SimpleDateFormat timeFormat = new SimpleDateFormat("mm:ss");

        mTextDuration.setText(timeFormat.format(mPlayMusicService.getDuration()));
        loadImageSong();
        mSeekBar.setMax(mPlayMusicService.getDuration());
        updateTimeSong();
    }

    public void loadImageSong() {
        Glide.with(PlayMusicActivity.this)
                .load(mPlayMusicService.getUserAvatar())
                .into(mImageAvata);
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.button_exit:
                Toast.makeText(this, "exit", Toast.LENGTH_SHORT).show();
                break;
            case R.id.button_download:
                Toast.makeText(this, "download", Toast.LENGTH_SHORT).show();
                break;
            case R.id.button_loop_all:
                Toast.makeText(this, "loop", Toast.LENGTH_SHORT).show();
                break;
            case R.id.button_previous:
                mPlayMusicService.previousSong();
                checkPlay();
               // setView();
                break;
            case R.id.button_play:
                checkPlay();
                setView();
                // mPlayMusicService.startForeground();
                break;
            case R.id.button_next:
                mPlayMusicService.nextSong();
                checkPlay();
              //  setView();
                break;
            case R.id.button_shuffle:
                Toast.makeText(this, "shuffle", Toast.LENGTH_SHORT).show();
                break;
        }
    }

    protected void getData() {
        Intent intent = PlayMusicService.newInstance(PlayMusicActivity.this, mSongs, mPostion);
        bindService(intent, mServiceConnection, Context.BIND_AUTO_CREATE);
        startService(intent);
    }

    private void checkPlay() {
        if (mPlayMusicService.isPlaying()) {
            mPlayMusicService.pauseSong();
            mButtonPlay.setImageResource(R.drawable.ic_play);
            //setView();
           // checkStart = true;
        } else {
            mPlayMusicService.playSong();
            mButtonPlay.setImageResource(R.drawable.ic_pause);
          //  setView();

           // checkStart = false;
        }
    }

    private void checkNextPrevious() {
        if (mPlayMusicService.isPlaying()) {
            mPlayMusicService.mMediaPlayer.reset();
            mButtonPlay.setImageResource(R.drawable.ic_play);
        }else{
            mPlayMusicService.mMediaPlayer.reset();
            mButtonPlay.setImageResource(R.drawable.ic_play);
        }
    }

    @Override
    public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {

    }

    @Override
    public void onStartTrackingTouch(SeekBar seekBar) {
        mPlayMusicService.mMediaPlayer.seekTo(mSeekBar.getProgress());
    }

    @Override
    public void onStopTrackingTouch(SeekBar seekBar) {
        mPlayMusicService.mMediaPlayer.seekTo(mSeekBar.getProgress());
    }

    private void updateTimeSong() {
        final Handler handler = new Handler();
        handler.postDelayed(new Runnable() {
            @Override
            public void run() {
                SimpleDateFormat timeFormat = new SimpleDateFormat("mm:ss");
                mTextCurrent.setText(
                        timeFormat.format(mPlayMusicService.mMediaPlayer.getCurrentPosition()));
                handler.postDelayed(this, 500);
                mSeekBar.setProgress(mPlayMusicService.mMediaPlayer.getCurrentPosition());
            }
        }, 100);
    }
}
